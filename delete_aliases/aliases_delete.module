<?php
/**
 * @file
 * Adds more options to delete specific URL aliases.
 */
/**

/**
 * Implements hook_menu().
 */
function aliases_delete_menu() {
  $items['admin/config/search/path/delete_bulk/specific'] = array(
    'title' => 'Delete Specific',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('aliases_delete_delete_specific'),
    'access arguments' => array('administer aliases delete'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 60,
    'file' => 'aliases_delete.admin.inc',
  );
  return $items;
}
/**
 * Implements hook_form_alter().
 */
function aliases_delete_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'pathauto_admin_deletea':
      $form['delete']['aliases_delete'] = array(
        '#type' => 'fieldset',
        '#title' => t('Choose specific aliases to delete'),
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
      );

      // Iterate over an array of objects/alias types which can be deleted and provide checkboxes
      $objects = module_invoke_all('path_alias_types');
      foreach ($objects as $internal_name => $label) {
        switch ($internal_name) {
          case 'node/':
            $form['delete'][$internal_name]['#title'] = t('Content Types');
            $content_types = node_type_get_types();
            foreach ($content_types as $c_key => $c_value) {
              //echo '<pre>'; print_r($c_key.' '); print_r($c_value); exit;

              //$count = db_query("SELECT count(1) FROM {url_alias} WHERE source LIKE :src", array(':src' => "$internal_name%"))->fetchField();
              $form['delete'][$c_key] = array(
                '#type' => 'checkbox',
                '#title' =>$c_value->name, // This label is sent through t() in the hard coded function where it is defined
                '#default_value' => FALSE,
                '#description' => t('Delete aliases for <em>@label</em> content type.', array('@label' =>$c_value->name)),
              );
            }
            break;

          default:
            # code...
            break;
        }
//exit;
        /*$count = db_query("SELECT count(1) FROM {url_alias} WHERE source LIKE :src", array(':src' => "$internal_name%"))->fetchField();
        $form['delete'][$internal_name] = array(
          '#type' => 'checkbox',
          '#title' => $label, // This label is sent through t() in the hard coded function where it is defined
          '#default_value' => FALSE,
          '#description' => t('Delete aliases for all @label. Number of aliases which will be deleted: %count.', array('@label' => $label, '%count' => $count)),
        );*/
      }
      //echo '<pre>'; print_r($form); exit;
      //echo "<pre>"; print_r($form); echo "</pre>";
      /*$types = node_type_get_types();
      echo '<pre>'; print_r($types); exit;*/
      break;
  }
}


/*function aliases_delete_menu() {
  $items['admin/aliases_delete/%'] = array(
    'page callback' => 'aliases_delete_delete_vocabulary',
    'page arguments' => array(2),
    'access callback' => 'taxonomy_term_edit_access',
    'access arguments' => array(3),
  );
  return $items;
}

function aliases_delete_delete_vocabulary($vocabulary_name){
  $vocab = taxonomy_vocabulary_machine_name_load($vocabulary_name);
  if(isset($vocab) && !empty($vocab)){
    $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocab->vid));
    $count = 0;
    foreach ($terms as $term) {
      $uri = entity_uri('taxonomy_term', $term);
      $source = $uri['path'];
      $sql = "SELECT pid FROM {url_alias} WHERE source = :source OR source LIKE :source_wildcard";
      $pids = db_query($sql, array(':source' => $source, ':source_wildcard' => $source . '/%'))->fetchCol();
      foreach ($pids as $pid) {
        $count++;
        path_delete(array('pid' => $pid));
      }
    }
    if ($count > 0) {
      return drupal_set_message(t("$count aliases have been deleted of all terms in <i>$vocabulary_name</i>"), $type = 'status' );
    }else{
      return drupal_set_message(t("<i>$vocabulary_name</i> doesn't have term(s) or alias(s)."), $type = 'error' );
    }
  }else{
    return drupal_set_message(t("<i>$vocabulary_name</i> is not a vocabulary"), $type = 'error' );
  }
}
*/
